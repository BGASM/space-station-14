using System.Linq;
using Content.Shared.PDA;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.PDA.Messenger.CustomControls;

[GenerateTypedNameReferences]
public sealed partial class PdaRecipientList : BoxContainer
{
    private List<KnownPda> _recipientList = new List<KnownPda>();

    public HashSet<KnownPda> SelectedRecipientHash = new();

    public List<KnownPda> SelectedRecipientList => SelectedRecipientHash.ToList();


    public const string StylePropertyBgColor = "backgroundColor";
    public const string NormalBgColor = "#313138";
    public const string HoverColor = "#3E6C45";


    public bool _frozen = false;

    public event Action? OnRxButtonToggled;




    private readonly StyleBoxFlat _styleBox = new()
    {
        BackgroundColor = Color.FromHex("#25252a"),
    };

    public PdaRecipientList()
    {
        RobustXamlLoader.Load(this);
        Panel.PanelOverride = _styleBox;
    }

    public void AddRecipientList(List<KnownPda> recipientList)
    {
        if (_frozen)
            return;

        _recipientList = recipientList;
        UpdateRecipientList();

    }

    public void Clear()
    {
        if (_frozen)
            return;
        RecipientList.DisposeAllChildren();
        SelectedRecipientList.Clear();
    }

    private void UpdateRecipientList()
    {
        if (_frozen)
            return;
        foreach (var rx in _recipientList)
        {
            var row = new BoxContainer();
            row.Orientation = LayoutOrientation.Horizontal;
            row.HorizontalExpand = true;

            row.AddChild(GenerateButton(rx));
            RecipientList.AddChild(row);
        }
    }

    public PdaRecipientButton GenerateButton(KnownPda rx)
    {
        var button = new PdaRecipientButton();
        button.Label.Text = rx.Name;
        button.Idx = rx.Address;
        button.ToggleMode = true;
        button.OnToggled += args =>
        {
            if (args.Pressed)
            {
                var pda = _recipientList.FirstOrDefault(p =>
                    (p.Name == button.Label.Text) && (p.Address == button.Idx));
                if (pda == null)
                    return;
                SelectedRecipientHash.Add(pda);
            }
            else
            {
                var pda = _recipientList.FirstOrDefault(p =>
                    (p.Name == button.Label.Text) && (p.Address == button.Idx));
                if (pda == null)
                    return;
                SelectedRecipientHash.Remove(pda);
            }
            OnRxButtonToggled?.Invoke();
        };
        return button;
    }

    public string GetRecipientsAsText()
    {
        var names = SelectedRecipientList.Select(x => x.Name).ToList();
        return string.Join(", ", names);
    }

    public Color BackgroundColor
    {
        get => _styleBox.BackgroundColor;
        set => _styleBox.BackgroundColor = value;
    }
    protected override void Draw(DrawingHandleScreen handle)
    {
        base.Draw(handle);

        if (TryGetStyleProperty<Color>(StylePropertyBgColor, out var bgColor))
            BackgroundColor = bgColor;

    }

}

